{"version":3,"file":"static/js/85.da245851.chunk.js","mappings":"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","sources":["gql/mutations/auth.js","service/_socket.js","components/auth/QRComponent.jsx","components/auth/AuthComponent.jsx"],"sourcesContent":["/*\n * File: auth.js\n * Project: Domain UI\n * path: /src/gql/queries\n * File Created: Saturday, 10th September 2022 12:09:34 pm\n * Author: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Last Modified: Saturday, 10th September 2022 12:40:39 pm\n * Modified By: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Copyright 2022 - 2022 AKcess, AKcess labs, UK\n */\n\nimport { gql } from \"@apollo/client\";\n\nexport const GENERATE_UUID = gql`\n    mutation {\n        generateUUID {\n            webUUID\n            authorization\n        }\n    }\n`\n\nexport const AUTH_PASSCODE = gql`\n    mutation loginByPassCode ($passCode: String!, $uuid: String!) {\n        loginByPassCode (passCode: $passCode, uuid: $uuid) {\n            firstName\n            lastName\n            email\n            phone\n            akcessId\n        }\n    }\n`","/*\n * File: _socket.js\n * Project: Domain UI\n * path: /src/service\n * File Created: Saturday, 10th September 2022 6:46:10 pm\n * Author: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Last Modified: Saturday, 10th September 2022 6:46:11 pm\n * Modified By: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Copyright 2022 - 2022 AKcess, AKcess labs, UK\n */\n\nimport { io } from \"socket.io-client\";\n\nconst _socket = io(process.env.REACT_APP_MOBILE_SERVER, {\n    transports: ['websocket']\n})\n\n// client-side\n_socket.on(\"connect\", () => {\n    console.log(\"Socket connected\", _socket.id);\n});\n\n_socket.on(\"error\", (err) => {\n    console.log(\"Socket connection err\", err.message);\n});\n\nexport default _socket","/*\n * File: QRComponent.jsx\n * Project: Domain UI\n * path: /src/components/auth\n * File Created: Tuesday, 6th September 2022 11:36:35 pm\n * Author: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Last Modified: Tuesday, 6th September 2022 11:36:36 pm\n * Modified By: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Copyright 2022 - 2022 AKcess, AKcess labs, UK\n */\n\nimport { WithRouter } from \"../common/WithRouter\"\nimport QRCode from \"react-qr-code\"\nimport { ButtonField } from '../common/form-fields'\nimport { AUTH_PASSCODE, GENERATE_UUID } from \"../../gql/mutations/auth\"\nimport { SpinnerComponent } from \"../common/SpinnerComponent\"\nimport { useContext, useEffect, useRef, useState } from \"react\"\nimport _socket from \"../../service/_socket\"\nimport { logout, saveCurrentUser, save_token } from \"../../service/auth\"\nimport { UserLoginContext } from \"../../context/UserContext\"\nimport { DynamicForm } from \"../common/form-fields/dynamic-form\"\nimport { useMutation } from \"@apollo/client\"\n\nconst FormSchema = [{\n    \"label\": \"AKcess OTP\",\n    \"id\": \"passCode\",\n    \"defaultValue\": \"\",\n    \"type\": \"password\",\n    \"maxLength\": 5,\n    \"required\": true,\n    \"hint\": \"Please provide `AKcess OTP` same as your Phone.\"\n}]\n\nconst QRComponent = ({ navigate }) => {\n\n    const [showQRScreen, setShowQRScreen] = useState(true)\n    const createFormRef = useRef();\n\n    // mutation to generate UUID\n    const [genUUID, genUUIDExec] = useMutation(GENERATE_UUID, {\n        notifyOnNetworkStatusChange: true,\n        onCompleted: ({ generateUUID }) => {\n            // request to register socket-id with received UUID on mobile server\n            _socket.emit('UUID', generateUUID.webUUID)\n\n            // save token into session-storage\n            save_token(generateUUID.authorization)\n        }\n    })\n\n    // mutation to login via passCode\n    const [passLogin, passLoginExec] = useMutation(AUTH_PASSCODE, {\n        notifyOnNetworkStatusChange: true,\n        onCompleted: ({ loginByPassCode }) => {\n            onLoginSuccess(loginByPassCode)\n        }\n    })\n\n    const { loginDispatch } = useContext(UserLoginContext)\n\n    useEffect(() => {\n        genUUID()\n        _socket.on('QR_SCAN_STATUS', data => {\n            onScanSuccess(data)\n        })\n    }, [])\n\n    /**\n     * @description take action on user's QR scann success\n     * @param SocketResponse data \n     * @return void\n     */\n    const onScanSuccess = data => {\n        // save user is no auth method found\n        if (data.auth === 'none')\n            return onLoginSuccess(data.user)\n\n        // request for OTP/akcessCode to login\n        setShowQRScreen(false)\n    }\n\n    const onLoginSuccess = (user) => {\n        saveCurrentUser(user)\n        loginDispatch({ type: 'LOGIN' })\n        navigate(\"/\")\n    }\n\n    const refresh_token = () => {\n        logout()\n        loginDispatch({ type: 'LOGOUT' })\n        genUUID()\n    }\n\n    const QRScreen = () => {\n        return <>\n            <div className=\"d-flex justify-content-center\">\n                {genUUIDExec.loading && <SpinnerComponent width={50} height={50} />}\n                {!genUUIDExec.loading && genUUIDExec.data && <QRCode size={128} value={JSON.stringify({ webUUID: genUUIDExec.data.generateUUID.webUUID })} />}\n            </div>\n            {!genUUIDExec.loading && genUUIDExec.data && <ButtonField onClick={refresh_token} label=\"Refresh QR code?\" variant=\"warning\" icon=\"refresh\" />}\n        </>\n    }\n\n    const onOTPLogin = () => {\n        let values = createFormRef.current.onSubmit()\n        if (values)\n            passLogin({ variables: { ...values, uuid: genUUIDExec.data.generateUUID.webUUID } })\n    }\n\n    /**\n     * @description display it if log method is not none\n     */\n    const OTPScreen = () => {\n        return <div>\n            <DynamicForm fields={FormSchema} ref={createFormRef} />\n            <div className=\"d-flex justify-content-end\">\n                {passLoginExec.loading ? <SpinnerComponent /> : <ButtonField icon=\"sign-in\" label=\"Login\" variant=\"success\" onClick={onOTPLogin} />}\n            </div>\n        </div>\n    }\n\n    return <div className=\"vstack gap-5\">\n        {showQRScreen ? <QRScreen /> : <OTPScreen />}\n    </div>\n}\n\nexport default WithRouter(QRComponent)","/*\n * File: AuthComponent.jsx\n * Project: Domain UI\n * path: /src/components/auth\n * File Created: Tuesday, 6th September 2022 11:03:23 pm\n * Author: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Last Modified: Tuesday, 6th September 2022 11:03:23 pm\n * Modified By: Ankit Gupta (ankit@akcess.dev)\n * -----\n * Copyright 2022 - 2022 AKcess, AKcess labs, UK\n */\n\nimport LoginImg from '../../assets/login-register.jpg'\nimport LogoImg from '../../assets/logo.png'\nimport QRComponent from './QRComponent'\n\nconst AuthComponent = () => {\n    return <div className=\"container\">\n        <div className=\"row shadow-sm\">\n            <div className=\"col-md-7 d-none d-sm-block\">\n                <img src={LoginImg} className=\"img-fluid\" alt=\"Login\" loading='lazy' />\n            </div>\n            <div className=\"col-md-5 col-sm-12\">\n                <img src={LogoImg} className='rounded mx-auto d-block my-5' alt=\"Logo\" loading='lazy' />\n                <QRComponent />\n            </div>\n        </div>\n    </div>\n}\n\nexport default AuthComponent"],"names":["GENERATE_UUID","gql","AUTH_PASSCODE","_socket","io","process","transports","on","console","log","id","err","message","FormSchema","WithRouter","navigate","useState","showQRScreen","setShowQRScreen","createFormRef","useRef","useMutation","notifyOnNetworkStatusChange","onCompleted","generateUUID","webUUID","save_token","authorization","genUUID","genUUIDExec","loginByPassCode","onLoginSuccess","passLogin","passLoginExec","loginDispatch","useContext","UserLoginContext","useEffect","data","onScanSuccess","auth","user","saveCurrentUser","type","refresh_token","logout","QRScreen","className","loading","SpinnerComponent","width","height","size","value","JSON","stringify","onClick","label","variant","icon","onOTPLogin","values","current","onSubmit","variables","uuid","OTPScreen","fields","ref","src","LoginImg","alt","LogoImg"],"sourceRoot":""}